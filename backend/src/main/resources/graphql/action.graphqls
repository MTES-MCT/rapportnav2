extend type Query {
    actionById(id: ID!, missionId: ID!, source: MissionSource!, type: ActionType!): Action
}

extend type Mutation {
    addOrUpdateStatus(statusAction: ActionStatusInput!): NavActionStatus!
    deleteStatus(id: String!): Boolean!
    addOrUpdateControl(controlAction: ActionControlInput!): NavActionControl!
    deleteControl(id: String!): Boolean!
    addOrUpdateFreeNote(freeNoteAction: ActionFreeNoteInput!): NavActionFreeNote
    deleteFreeNote(id: String!): Boolean
    addOrUpdateActionRescue(rescueAction: ActionRescueInput!): NavActionRescue
    addOrUpdateActionNauticalEvent(nauticalAction: ActionNauticalEventInput!): NavActionNauticalEvent
    addOrUpdateActionVigimer(vigimerAction: ActionVigimerInput!): NavActionVigimer
    addOrUpdateActionAntiPollution(antiPollutionAction: ActionAntiPollutionInput!): NavActionAntiPollution
    addOrUpdateActionBAAEMPermanence(baaemPermanenceAction: ActionBAAEMPermanenceInput!): NavActionBAAEMPermanence
    addOrUpdateActionPublicOrder(publicOrderAction: ActionPublicOrderInput!): NavActionPublicOrder
    addOrUpdateActionRepresentation(representationAction: ActionRepresentationInput!): NavActionRepresentation
    addOrUpdateActionIllegalImmigration(illegalImmigrationAction: ActionIllegalImmigrationInput!): NavActionIllegalImmigration
    deleteRescue(id: String!): Boolean
    deleteNauticalEvent(id: String!): Boolean
    deleteVigimer(id: String!): Boolean
    deleteBAAEMPermanence(id: String!): Boolean
    deleteAntiPollution(id: String!): Boolean
    deleteRepresentation(id: String!): Boolean
    deletePublicOrder(id: String!): Boolean
    deleteIllegalImmigration(id: String!): Boolean

}

type Action {
    id: String
    startDateTimeUtc: String!
    endDateTimeUtc: String
    source: MissionSource!
    status: ActionStatusType!
    type: ActionType
    summaryTags: [String]
    data: ActionData
}

input ActionStatusInput {
    id: String
    missionId: Int!
    startDateTimeUtc: String
    status: ActionStatusType!
    reason: ActionStatusReason
    observations: String
}

input ActionControlInput {
    id: String
    missionId: Int!
    startDateTimeUtc: String
    endDateTimeUtc: String
    controlMethod: ControlMethod!
    latitude: Float
    longitude: Float
    vesselType: VesselType!
    vesselIdentifier: String
    vesselSize: VesselSize
    identityControlledPerson: String
    observations: String
}

input ActionFreeNoteInput {
    id: String
    missionId: Int!
    startDateTimeUtc: String!
    observations: String
}

input ActionRescueInput {
  id: String
  missionId: Int!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  longitude: Float
  latitude: Float
  isVesselRescue: Boolean
  isPersonRescue: Boolean
  isVesselNoticed: Boolean
  isVesselTowed: Boolean
  observations: String
  isInSRRorFollowedByCROSSMRCC: Boolean
  numberPersonsRescued: Int
  numberOfDeaths: Int
  operationFollowsDEFREP: Boolean
  locationDescription: String
}

input ActionNauticalEventInput {
  id: String
  missionId: Int!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

input ActionVigimerInput {
  id: String
  missionId: Int!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

input ActionAntiPollutionInput {
  id: String
  missionId: Int!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

input ActionBAAEMPermanenceInput {
  id: String
  missionId: Int!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

input ActionPublicOrderInput {
  id: String
  missionId: Int!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

input ActionRepresentationInput {
  id: String
  missionId: Int!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

input ActionIllegalImmigrationInput {
  id: String
  missionId: Int!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
  nbOfInterceptedVessels: Int
  nbOfInterceptedMigrants: Int
  nbOfSuspectedSmugglers: Int
  latitude: Float
  longitude: Float
}

enum MissionSource {
    MONITORENV
    MONITORFISH
    POSEIDON_CACEM
    POSEIDON_CNSP
    RAPPORTNAV
}

union ActionData =
    FishActionData
    | EnvActionData
    | NavActionControl
    | NavActionStatus
    | NavActionFreeNote
    | NavActionRescue
    | NavActionNauticalEvent
    | NavActionVigimer
    | NavActionAntiPollution
    | NavActionBAAEMPermanence
    | NavActionPublicOrder
    | NavActionRepresentation
    | NavActionIllegalImmigration

type NavActionStatus {
    id: String!
    startDateTimeUtc: String!
    status: ActionStatusType!
    reason: ActionStatusReason
    observations: String
}

type NavActionFreeNote {
    id: String!
    startDateTimeUtc: String!
    observations: String
}

type NavActionRescue {
  id: String!
  missionId: String
  startDateTimeUtc: String!
  endDateTimeUtc: String
  longitude: Float
  latitude: Float
  isVesselRescue: Boolean
  isPersonRescue: Boolean
  isVesselNoticed: Boolean
  isVesselTowed: Boolean
  observations: String
  isInSRRorFollowedByCROSSMRCC: Boolean
  numberPersonsRescued: Int
  numberOfDeaths: Int
  operationFollowsDEFREP: Boolean
  locationDescription: String
}

type NavActionNauticalEvent {
  id: String!
  missionId: String!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

type NavActionVigimer {
  id: String!
  missionId: String!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

type NavActionAntiPollution {
  id: String!
  missionId: String!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

type NavActionBAAEMPermanence {
  id: String!
  missionId: String!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

type NavActionPublicOrder {
  id: String!
  missionId: String!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

type NavActionRepresentation {
  id: String!
  missionId: String!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

type NavActionIllegalImmigration {
  id: String!
  missionId: String!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
  nbOfInterceptedVessels: Int
  nbOfInterceptedMigrants: Int
  nbOfSuspectedSmugglers: Int
  latitude: Float
  longitude: Float
}

enum ActionStatusType {
    NAVIGATING
    ANCHORED
    DOCKED
    UNAVAILABLE
    UNKNOWN
}
enum ActionStatusReason {
    MAINTENANCE
    WEATHER
    REPRESENTATION
    ADMINISTRATION
    HARBOUR_CONTROL
    TECHNICAL
    PERSONNEL
    OTHER
}

type NavActionControl {
    id: String!
    startDateTimeUtc: String!
    endDateTimeUtc: String
    controlMethod: ControlMethod
    latitude: Float
    longitude: Float
    vesselType: VesselType
    vesselIdentifier: String
    vesselSize: VesselSize
    identityControlledPerson: String
    observations: String
    controlAdministrative: ControlAdministrative
    controlGensDeMer: ControlGensDeMer
    controlNavigation: ControlNavigation
    controlSecurity: ControlSecurity
}

enum ControlMethod {
    SEA
    AIR
    LAND
}

enum VesselType {
    FISHING
    SAILING
    MOTOR
    COMMERCIAL
    SAILING_LEISURE
}

enum VesselSize {
    LESS_THAN_12m
    FROM_12_TO_24m
    FROM_24_TO_46m
    MORE_THAN_46m
}

enum ActionType {
    CONTROL
    SURVEILLANCE
    CONTACT
    NOTE
    STATUS
    OTHER
    RESCUE
    NAUTICAL_EVENT
    VIGIMER
    ANTI_POLLUTION
    BAAEM_PERMANENCE
    PUBLIC_ORDER
    REPRESENTATION
    ILLEGAL_IMMIGRATION
}

type EnvActionData {
    id: String!
    actionStartDateTimeUtc: String!
    actionEndDateTimeUtc: String!
    geom: String
    facade: String
    department: String
    themes: [ThemeEntity]
    observations: String
    infractions: [InfractionByTarget]
    actionNumberOfControls: Int
    actionTargetType: ActionTargetTypeEnum
    vehicleType: VehicleTypeEnum
    availableControlTypesForInfraction: [ControlType]
    controlsToComplete: [ControlType]
    controlAdministrative: ControlAdministrative
    controlGensDeMer: ControlGensDeMer
    controlNavigation: ControlNavigation
    controlSecurity: ControlSecurity
}

type FishActionData {
    id: String!
    actionDatetimeUtc: String!
    vesselId: Int
    vesselName: String
    latitude: Float
    longitude: Float
    facade: String
    actionType: FishActionType
    controlsToComplete: [ControlType]
    controlAdministrative: ControlAdministrative
    controlGensDeMer: ControlGensDeMer
    controlNavigation: ControlNavigation
    controlSecurity: ControlSecurity
    emitsVms: ControlCheck
    emitsAis: ControlCheck
    licencesMatchActivity: ControlCheck
    logbookMatchesActivity: ControlCheck
    logbookInfractions: [LogbookInfraction]
    licencesAndLogbookObservations: String
    gearOnboard: [GearControl]
    gearInfractions: [GearInfraction]
    speciesOnboard: [SpeciesControl]
    speciesObservations: String
    speciesInfractions: [SpeciesInfraction]
    seizureAndDiversion: Boolean
    seizureAndDiversionComments: String
    hasSomeGearsSeized: Boolean
    hasSomeSpeciesSeized: Boolean
    otherInfractions: [OtherInfraction]
    otherComments: String
    vesselTargeted: ControlCheck
    unitWithoutOmegaGauge: Boolean
    controlQualityComments: String
    feedbackSheetRequired: Boolean
    userTrigram: String
    faoAreas: [String]
    segments: [FleetSegment]
}

type LogbookInfraction {
    infractionType: FishInfractionType
    natinf: Int
    comments: String
}
type GearInfraction {
    infractionType: FishInfractionType
    natinf: Int
    comments: String
}
type SpeciesInfraction {
    infractionType: FishInfractionType
    natinf: Int
    comments: String
}
type OtherInfraction {
    infractionType: FishInfractionType
    natinf: Int
    comments: String
}

type FleetSegment {
    segment: String
    segmentName: String
}

type GearControl {
    comments: String
    controlledMesh: Float
    declaredMesh: Float
    gearCode: String
    gearName: String
    gearWasControlled: Boolean
    hasUncontrolledMesh: Boolean
}

type SpeciesControl {
    speciesCode: String
    nbFish: Float
    declaredWeight: Float
    controlledWeight: Float
    underSized: Boolean
}


enum ControlCheck {
    YES
    NO
    NOT_APPLICABLE
}

enum FishActionType {
    SEA_CONTROL
    LAND_CONTROL
    AIR_CONTROL
    AIR_SURVEILLANCE
    OBSERVATION
}

type ThemeEntity {
    theme: String
    subThemes: [String]
    protectedSpecies: [String]
}

enum ActionTargetTypeEnum {
    VEHICLE
    COMPANY
    INDIVIDUAL
}

enum VehicleTypeEnum {
    VESSEL
    OTHER_SEA
    VEHICLE_LAND
    VEHICLE_AIR
}
