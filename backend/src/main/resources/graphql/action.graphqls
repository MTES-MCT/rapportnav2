extend type Query {
  actionById(id: ID!, missionId: ID!, source: MissionSource!, type: ActionType!): Action
}

extend type Mutation {
  addOrUpdateStatus(statusAction: ActionStatusInput!): NavActionStatus!
  deleteStatus(id: String!): Boolean!
  addOrUpdateControl(controlAction: ActionControlInput!): NavActionControl!
  deleteControl(id: String!): Boolean!
  addOrUpdateFreeNote(freeNoteAction: ActionFreeNoteInput!): NavActionFreeNote
  deleteFreeNote(id: String!): Boolean
  addOrUpdateActionRescue(rescueAction: ActionRescueInput!): NavActionRescue
  addOrUpdateActionNauticalEvent(nauticalAction: ActionNauticalEventInput!): NavActionNauticalEvent
  addOrUpdateActionVigimer(vigimerAction: ActionVigimerInput!): NavActionVigimer
  addOrUpdateActionAntiPollution(antiPollutionAction: ActionAntiPollutionInput!): NavActionAntiPollution
  addOrUpdateActionBAAEMPermanence(baaemPermanenceAction: ActionBAAEMPermanenceInput!): NavActionBAAEMPermanence
  addOrUpdateActionPublicOrder(publicOrderAction: ActionPublicOrderInput!): NavActionPublicOrder
  addOrUpdateActionRepresentation(representationAction: ActionRepresentationInput!): NavActionRepresentation
  addOrUpdateActionIllegalImmigration(illegalImmigrationAction: ActionIllegalImmigrationInput!): NavActionIllegalImmigration
  deleteRescue(id: String!): Boolean
  deleteNauticalEvent(id: String!): Boolean
  deleteVigimer(id: String!): Boolean
  deleteBAAEMPermanence(id: String!): Boolean
  deleteAntiPollution(id: String!): Boolean
  deleteRepresentation(id: String!): Boolean
  deletePublicOrder(id: String!): Boolean
  deleteIllegalImmigration(id: String!): Boolean

}

type Action {
  id: String
  startDateTimeUtc: String!
  endDateTimeUtc: String
  source: MissionSource!
  status: ActionStatusType!
  type: ActionType
  summaryTags: [String]
  completenessForStats: CompletenessForStats
  data: ActionData
}

input ActionStatusInput {
  id: String
  missionId: ID!
  startDateTimeUtc: String
  status: ActionStatusType!
  reason: ActionStatusReason
  observations: String
}

input ActionControlInput {
  id: String
  missionId: ID!
  startDateTimeUtc: String
  endDateTimeUtc: String
  controlMethod: ControlMethod!
  latitude: Float
  longitude: Float
  vesselType: VesselType!
  vesselIdentifier: String
  vesselSize: VesselSize
  identityControlledPerson: String
  observations: String
}

input ActionFreeNoteInput {
  id: String
  missionId: ID!
  startDateTimeUtc: String!
  observations: String
}

input ActionRescueInput {
  id: String
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  longitude: Float
  latitude: Float
  isVesselRescue: Boolean
  isPersonRescue: Boolean
  isVesselNoticed: Boolean
  isVesselTowed: Boolean
  observations: String
  isInSRRorFollowedByCROSSMRCC: Boolean
  numberPersonsRescued: Int
  numberOfDeaths: Int
  operationFollowsDEFREP: Boolean
  locationDescription: String
  isMigrationRescue: Boolean
  nbAssistedVesselsReturningToShore: Int
  nbOfVesselsTrackedWithoutIntervention: Int
}

input ActionNauticalEventInput {
  id: String
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

input ActionVigimerInput {
  id: String
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

input ActionAntiPollutionInput {
  id: String
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
  latitude: Float
  longitude: Float
  detectedPollution: Boolean
  pollutionObservedByAuthorizedAgent: Boolean
  diversionCarriedOut: Boolean
}

input ActionBAAEMPermanenceInput {
  id: String
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

input ActionPublicOrderInput {
  id: String
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

input ActionRepresentationInput {
  id: String
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

input ActionIllegalImmigrationInput {
  id: String
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
  nbOfInterceptedVessels: Int
  nbOfInterceptedMigrants: Int
  nbOfSuspectedSmugglers: Int
  latitude: Float
  longitude: Float
}

enum MissionSource {
  MONITORENV
  MONITORFISH
  POSEIDON_CACEM
  POSEIDON_CNSP
  RAPPORTNAV
}

union ActionData =
  FishActionData
  | EnvActionData
  | NavActionControl
  | NavActionStatus
  | NavActionFreeNote
  | NavActionRescue
  | NavActionNauticalEvent
  | NavActionVigimer
  | NavActionAntiPollution
  | NavActionBAAEMPermanence
  | NavActionPublicOrder
  | NavActionRepresentation
  | NavActionIllegalImmigration

type NavActionStatus {
  id: String!
  startDateTimeUtc: String!
  status: ActionStatusType!
  reason: ActionStatusReason
  observations: String
}

type NavActionFreeNote {
  id: String!
  startDateTimeUtc: String!
  observations: String
}

type NavActionRescue {
  id: String!
  missionId: ID
  startDateTimeUtc: String!
  endDateTimeUtc: String
  longitude: Float
  latitude: Float
  isVesselRescue: Boolean
  isPersonRescue: Boolean
  isVesselNoticed: Boolean
  isVesselTowed: Boolean
  observations: String
  isInSRRorFollowedByCROSSMRCC: Boolean
  numberPersonsRescued: Int
  numberOfDeaths: Int
  operationFollowsDEFREP: Boolean
  locationDescription: String
  isMigrationRescue: Boolean
  nbAssistedVesselsReturningToShore: Int
  nbOfVesselsTrackedWithoutIntervention: Int

}

type NavActionNauticalEvent {
  id: String!
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

type NavActionVigimer {
  id: String!
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

type NavActionAntiPollution {
  id: String!
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
  latitude: Float
  longitude: Float
  detectedPollution: Boolean
  pollutionObservedByAuthorizedAgent: Boolean
  diversionCarriedOut: Boolean
}

type NavActionBAAEMPermanence {
  id: String!
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

type NavActionPublicOrder {
  id: String!
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

type NavActionRepresentation {
  id: String!
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
}

type NavActionIllegalImmigration {
  id: String!
  missionId: ID!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  observations: String
  nbOfInterceptedVessels: Int
  nbOfInterceptedMigrants: Int
  nbOfSuspectedSmugglers: Int
  latitude: Float
  longitude: Float
}

enum ActionStatusType {
  NAVIGATING
  ANCHORED
  DOCKED
  UNAVAILABLE
  UNKNOWN
}
enum ActionStatusReason {
  MAINTENANCE
  WEATHER
  REPRESENTATION
  ADMINISTRATION
  HARBOUR_CONTROL
  TECHNICAL
  PERSONNEL
  OTHER
}

type NavActionControl {
  id: String!
  startDateTimeUtc: String!
  endDateTimeUtc: String
  controlMethod: ControlMethod
  latitude: Float
  longitude: Float
  vesselType: VesselType
  vesselIdentifier: String
  vesselSize: VesselSize
  identityControlledPerson: String
  observations: String
  controlAdministrative: ControlAdministrative
  controlGensDeMer: ControlGensDeMer
  controlNavigation: ControlNavigation
  controlSecurity: ControlSecurity
}

enum ControlMethod {
  SEA
  AIR
  LAND
}

enum VesselType {
  FISHING
  SAILING
  MOTOR
  COMMERCIAL
  SAILING_LEISURE
}

enum VesselSize {
  LESS_THAN_12m
  FROM_12_TO_24m
  FROM_24_TO_46m
  MORE_THAN_46m
}

enum ActionType {
  CONTROL
  SURVEILLANCE
  CONTACT
  NOTE
  STATUS
  OTHER
  RESCUE
  NAUTICAL_EVENT
  VIGIMER
  ANTI_POLLUTION
  BAAEM_PERMANENCE
  PUBLIC_ORDER
  REPRESENTATION
  ILLEGAL_IMMIGRATION
}


enum ControlCheck {
  YES
  NO
  NOT_APPLICABLE
}


enum ActionTargetTypeEnum {
  VEHICLE
  COMPANY
  INDIVIDUAL
}

enum VehicleTypeEnum {
  VESSEL
  OTHER_SEA
  VEHICLE_LAND
  VEHICLE_AIR
}
