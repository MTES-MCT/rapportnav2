extend type Query {
  natinfs: [Natinf]
}

extend type Mutation {
  addOrUpdateInfraction(infraction: InfractionInput!): Infraction!
  addOrUpdateInfractionForEnvTarget(
    infraction: InfractionWithNewTargetInput!
  ): Infraction!
  deleteInfraction(id: String!): Boolean!
}

type Infraction {
  id: String!
  controlType: String
  infractionType: InfractionType
  natinfs: [String]
  observations: String
  target: InfractionTarget
}

type InfractionTarget {
  id: String!
  vesselIdentifier: String
  identityControlledPerson: String
  vesselType: VesselType
  vesselSize: VesselSize
  companyName: String
  relevantCourt: String
  infractionType: String
  formalNotice: String
  toProcess: Boolean
}

# for Env controls, we group by vesselIdentifier
type InfractionByTarget {
  vesselIdentifier: String
  vesselType: VesselType
  controlTypesWithInfraction: [ControlType]
  targetAddedByUnit: Boolean
  infractions: [Infraction]
}

type Natinf {
  infraction: String!
  natinfCode: String!
}

enum InfractionType {
  WAITING
  WITH_REPORT
  WITHOUT_REPORT
}

enum FishInfractionType {
  WITH_RECORD
  WITHOUT_RECORD
  PENDING
}

input InfractionInput {
  id: String
  missionId: ID!
  actionId: String!
  controlId: String
  controlType: String!
  infractionType: String
  natinfs: [String]
  observations: String
}

input InfractionWithNewTargetInput {
  id: String
  missionId: ID!
  actionId: String!
  controlId: String
  controlType: String!
  infractionType: String
  natinfs: [String]
  observations: String
  vesselIdentifier: String!
  identityControlledPerson: String!
  vesselType: VesselType!
  vesselSize: VesselSize!
}
