analyse_trivy:
  stage: analyze
  image:
    name: aquasec/trivy:0.38.1
    entrypoint: [""]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: $NEXUS_USER
    TRIVY_PASSWORD: $NEXUS_PWD
    TRIVY_NON_SSL: "true"
    TRIVY_SERVER: "http://trivy.dsi.damgm.i2"
    FULL_IMAGE_NAME: $TAG_LATEST
    BDD_IMAGE_NAME: $NEXUS_DOCKER_PROXY/postgres:15-bookworm
    HTTP_PROXY: "http://172.27.229.197:8090"
    HTTPS_PROXY: "http://172.27.229.197:8090"
    NO_PROXY: "gitlab-sml.din.developpement-durable.gouv.fr,int-docker01,localhost,127.0.0.1,0.0.0.0,.dsi.damgm.i2"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image -d --server $TRIVY_SERVER $FULL_IMAGE_NAME --clear-cache --timeout 120m --cache-dir .trivycache/
    - |
      if [[ "$FAIL_TRIVY_CONDITION" != "" && "$KEEP_RUNNING" != "true" ]]; then
        # Fail on critical vulnerabilities
        time trivy image -d --server $TRIVY_SERVER --exit-code 1 --cache-dir .trivycache/ $FAIL_TRIVY_CONDITION --no-progress --format template --template "@/contrib/html.tpl" --output "container-scanning-report.html" "$FULL_IMAGE_NAME"
      else
        # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
        time trivy image -d --server $TRIVY_SERVER --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/contrib/html.tpl" --output "container-scanning-report-app.html" "$FULL_IMAGE_NAME"
      fi

    - time trivy image -d --server $TRIVY_SERVER $BDD_IMAGE_NAME --clear-cache --timeout 120m --cache-dir .trivycache/
    - |
      if [[ "$FAIL_TRIVY_CONDITION" != "" && "$KEEP_RUNNING" != "true" ]]; then
        # Fail on critical vulnerabilities
        time trivy image -d --server $TRIVY_SERVER --exit-code 1 --cache-dir .trivycache/ $FAIL_TRIVY_CONDITION --no-progress --format template --template "@/contrib/html.tpl" --output "container-scanning-report.html" "$BDD_IMAGE_NAME"
      else
        # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
        time trivy image -d --server $TRIVY_SERVER --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@/contrib/html.tpl" --output "container-scanning-report-bdd.html" "$BDD_IMAGE_NAME"
      fi
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    paths:
      - container-scanning-report-app.html
      - container-scanning-report-bdd.html
  tags:
    - analyze

